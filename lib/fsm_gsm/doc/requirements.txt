Estar hecho con FSM - check
Estado inicial GSM_IDLE - check
Al inicializar la FSM, se actualiza el timeout - check

// GSM_IDLE
Check_timeout() devuelve TRUE si el tiempo actual es mayor que el timeout. - check
Si check_timeout() devuelve FALSE, se queda en estado GSM_IDLE. - check
Si check_timeout() devuelve TRUE, se pasa al estado GSM_CHECK y se actualiza el timeout - check

// GSM_CHECK
gsm_data_available() devuelve TRUE si hay datos que leer, si no, FALSE - check
gsm_not_data_available_and_fifo_is_empty() devuelve TRUE si no hay datos que leer y la fifo está vacía, si no, FALSE - check
gsm_not_data_available_and_fifo_is_not_empty() devuelve TRUE si no hay datos que leer y la fifo no está vacía, si no, FALSE - check

Si gsm_data_available() devuelve TRUE, se pasa al estado GSM_READ y se ejecuta la función gsm_read() - check
Si gsm_not_data_available_and_fifo_is_empty() devuelve TRUE, se pasa al estado GSM_IDLE. - check
Si gsm_not_data_available_and_fifo_is_not_empty() devuelve TRUE, se pasa al estado GSM_IDLE y se ejecuta la función read_fifo_and_gsm_send(). - check

// GSM_READ
Si active_request() devuelve TRUE, se pasa al estado GSM_IDLE y se ejecuta la función set_alarm() - check
Si deactive_request() devuelve TRUE, se pasa al estado GSM_IDLE y se ejecuta la función reset_alarm() - check
Si position_request() devuelve TRUE, se pasa al estado GSM_IDLE y se ejecuta la función find_car() - check
Si invalid_request() devuelve TRUE, se pasa al estado GSM_IDLE - check
active_request() devuelve TRUE si data = ACTIVE - check
deactive_request() devuelve TRUE si data = DEACTIVE - check
pos_request() devuelve TRUE si data = GET_POS - check