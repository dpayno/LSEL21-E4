/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_FSM_DOOR_CHECKING_INTERNAL_H
#define _MOCK_FSM_DOOR_CHECKING_INTERNAL_H

#include "unity.h"
#include "fsm_door_checking_internal.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_fsm_door_checking_internal_Init(void);
void mock_fsm_door_checking_internal_Destroy(void);
void mock_fsm_door_checking_internal_Verify(void);




#define is_active_and_door_open_IgnoreAndReturn(cmock_retval) is_active_and_door_open_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void is_active_and_door_open_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define is_active_and_door_open_StopIgnore() is_active_and_door_open_CMockStopIgnore()
void is_active_and_door_open_CMockStopIgnore(void);
#define is_active_and_door_open_ExpectAnyArgsAndReturn(cmock_retval) is_active_and_door_open_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void is_active_and_door_open_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define is_active_and_door_open_ExpectAndReturn(cmock_arg1, cmock_retval) is_active_and_door_open_CMockExpectAndReturn(__LINE__, cmock_arg1, cmock_retval)
void is_active_and_door_open_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, fsm_t* cmock_arg1, int cmock_to_return);
typedef int (* CMOCK_is_active_and_door_open_CALLBACK)(fsm_t* cmock_arg1, int cmock_num_calls);
void is_active_and_door_open_AddCallback(CMOCK_is_active_and_door_open_CALLBACK Callback);
void is_active_and_door_open_Stub(CMOCK_is_active_and_door_open_CALLBACK Callback);
#define is_active_and_door_open_StubWithCallback is_active_and_door_open_Stub
#define is_not_active_IgnoreAndReturn(cmock_retval) is_not_active_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void is_not_active_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define is_not_active_StopIgnore() is_not_active_CMockStopIgnore()
void is_not_active_CMockStopIgnore(void);
#define is_not_active_ExpectAnyArgsAndReturn(cmock_retval) is_not_active_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void is_not_active_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define is_not_active_ExpectAndReturn(this, cmock_retval) is_not_active_CMockExpectAndReturn(__LINE__, this, cmock_retval)
void is_not_active_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, fsm_t* this, int cmock_to_return);
typedef int (* CMOCK_is_not_active_CALLBACK)(fsm_t* this, int cmock_num_calls);
void is_not_active_AddCallback(CMOCK_is_not_active_CALLBACK Callback);
void is_not_active_Stub(CMOCK_is_not_active_CALLBACK Callback);
#define is_not_active_StubWithCallback is_not_active_Stub
#define set_door_flag_Ignore() set_door_flag_CMockIgnore()
void set_door_flag_CMockIgnore(void);
#define set_door_flag_StopIgnore() set_door_flag_CMockStopIgnore()
void set_door_flag_CMockStopIgnore(void);
#define set_door_flag_ExpectAnyArgs() set_door_flag_CMockExpectAnyArgs(__LINE__)
void set_door_flag_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define set_door_flag_Expect(this) set_door_flag_CMockExpect(__LINE__, this)
void set_door_flag_CMockExpect(UNITY_LINE_TYPE cmock_line, fsm_t* this);
typedef void (* CMOCK_set_door_flag_CALLBACK)(fsm_t* this, int cmock_num_calls);
void set_door_flag_AddCallback(CMOCK_set_door_flag_CALLBACK Callback);
void set_door_flag_Stub(CMOCK_set_door_flag_CALLBACK Callback);
#define set_door_flag_StubWithCallback set_door_flag_Stub
#define clear_door_flag_Ignore() clear_door_flag_CMockIgnore()
void clear_door_flag_CMockIgnore(void);
#define clear_door_flag_StopIgnore() clear_door_flag_CMockStopIgnore()
void clear_door_flag_CMockStopIgnore(void);
#define clear_door_flag_ExpectAnyArgs() clear_door_flag_CMockExpectAnyArgs(__LINE__)
void clear_door_flag_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define clear_door_flag_Expect(this) clear_door_flag_CMockExpect(__LINE__, this)
void clear_door_flag_CMockExpect(UNITY_LINE_TYPE cmock_line, fsm_t* this);
typedef void (* CMOCK_clear_door_flag_CALLBACK)(fsm_t* this, int cmock_num_calls);
void clear_door_flag_AddCallback(CMOCK_clear_door_flag_CALLBACK Callback);
void clear_door_flag_Stub(CMOCK_clear_door_flag_CALLBACK Callback);
#define clear_door_flag_StubWithCallback clear_door_flag_Stub

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
